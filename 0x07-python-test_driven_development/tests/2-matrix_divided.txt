>>> matrix_divided = __import__('2-matrix_divided').matrix_divided


tests:

	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 2)
	[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]


	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
	Traceback (most recent call last):
	...
	ZeroDivisionError: division by zero


	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], float("inf"))
	[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]


	>>> matrix_divided([[1, 2, 3], [4, '5', 6]], None)
	Traceback (most recent call last):
	...
	TypeError: div must be a number


	>>> matrix_divided([[1, 2, 3], [4, '5', 6]], "s")
	Traceback (most recent call last):
	...
	TypeError: div must be a number


	>>> matrix_divided([[1, 2, 3], [4, 5, 6]], 1.1)
	[[0.91, 1.82, 2.73], [3.64, 4.55, 5.45]]

	
	>>> matrix_divided([[1, 2, 3], [4, 5, 6, 7]], 1.1)
	Traceback (most recent call last):
	...
	TypeError: Each row of the matrix must have the same size


	>>> matrix_divided([['a', 'b', 'c'], ['a', 'b', 'c']], 2)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats


	>>> matrix_divided([[None], [None]], 2)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats


	>>> matrix_divided([[], []], 2)
	Traceback (most recent call last):
	...
	TypeError: matrix must be a matrix (list of lists) of integers/floats
	
	>>> matrix_divided()
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
	
	>>> matrix_divided([[1, 2, 3], [4, 5, 6]])
	Traceback (most recent call last):
	...
	TypeError: matrix_divided() missing 1 required positional argument: 'div'


